{"version":3,"sources":["components/Other/Other.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","components/Other/Anothersitelink.js","App.js","serviceWorker.js","index.js","App.module.css","components/Cards/Cards.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","numberInfected","start","end","value","duration","separator","Date","toDateString","numberRecovered","numberDeaths","deathRate","numberDeathRate","recoverRate","numberRecoverRate","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","Anothersitelink","videoframe","width","height","src","frameborder","allow","allowfullscreen","App","state","fetchedData","setState","this","coronaImage","image","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48140c6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Other_container__3arI_\",\"videoframe\":\"Other_videoframe__3U2vd\",\"card\":\"Other_card__3Kyei\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate } }) => {\n    if(!confirmed) {\n        return 'Loading...';\n    }\n    return (\n       <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\" className={styles.numberInfected}>\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                             />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\" className={styles.numberRecovered}>\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                             />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\" className={styles.numberDeaths}>\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                             />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deathRate)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Death Rate</Typography>\n                        <Typography variant=\"h5\" className={styles.numberDeathRate}>\n                            <CountUp\n                                start={0}\n                                end={(deaths.value/confirmed.value)*100}\n                                duration={2.5}\n                                separator=\",\"\n                             /><small>%</small>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Death Rate by COVID-19</Typography>\n                    </CardContent>\n                </Grid>  \n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recoverRate)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recover Rate</Typography>\n                        <Typography variant=\"h5\" className={styles.numberRecoverRate}>\n                            <CountUp\n                                start={0}\n                                end={(recovered.value/confirmed.value)*100}\n                                duration={2.5}\n                                separator=\",\"\n                             /><small>%</small>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Recover Rate by COVID-19</Typography>\n                    </CardContent>\n                </Grid>                    \n            </Grid>\n       </div>\n    );\n};\n\nexport default Cards;","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api';\n\n\nexport const fetchData = async (country) => {\n\n    let changeableUrl = url;\n\n    if(country) {\n        changeableUrl = `${url}/countries/${country}`\n    }\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch(error) {\n        console.log(error);\n    }\n}\n\n\n\n\n\nexport const fetchDailyData = async () => {\n    try {           \n        const { data } = await axios.get(`${url}/daily`);\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }));\n\n        return modifiedData;\n    } catch(error) {\n        console.log(error)\n    }\n}\n\n\n\n\n\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries }} = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n    } catch(error) {\n        console.log(error)\n    }\n}","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n         fetchAPI();\n    },[]);\n\n\n    const lineChart = (\n        dailyData.length ? (\n\n            <Line\n            data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [\n                {\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true\n                },\n                {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor:'rgba(255,0,0,0.5)',\n                    fill: true\n                }\n                ],\n            }}\n        />\n\n        ) : null\n        \n    );\n\n\n    const barChart = (\n        confirmed ? (\n            <Bar \n\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: 'People',\n                    backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\n                    data:[confirmed.value, recovered.value, deaths.value]\n                },\n                {\n\n                }]\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, text:`Current state in ${country}`}\n            }}\n\n            /> \n        ) \n        :\n         null\n    )\n\n    return (\n        <div className={styles.container}>\n            { country ? barChart : lineChart }\n        </div>\n    );\n};\n\nexport default Chart;","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css'\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchAPI();\n    },[setFetchedCountries]);\n\n    console.log(fetchedCountries)\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                { fetchedCountries.map((country,i) => <option key={i} value={country}>{ country }</option>)}\n            </NativeSelect>\n        </FormControl>\n    );\n};\n\nexport default CountryPicker;","import React from 'react';\nimport Iframe from 'react-iframe'\nimport styles from './Other.module.css';\nimport { Card, CardContent, Grid } from '@material-ui/core';\nimport cx from 'classnames'\n\nconst Anothersitelink = () => {\n    return (\n        <div className={styles.container}>\n         <Grid container spacing={3} justify=\"center\">\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card)}>\n            <CardContent>\n                <iframe className={styles.videoframe} width=\"770\" height=\"440\" src=\"https://www.youtube.com/embed/9Ay4u7OYOhA\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture; fullscreen\" allowfullscreen></iframe>\n            </CardContent>\n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card)}>\n            <CardContent>\n                <iframe className={styles.videoframe} width=\"770\" height=\"440\" src=\"https://www.youtube.com/embed/BDlE4aUT9tw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture; fullscreen\" allowfullscreen></iframe>\n            </CardContent>\n            </Grid>\n         \n         </Grid>\n       \n            \n        </div>\n    );\n};\n\nexport default Anothersitelink;","import React, { Component } from 'react'\nimport { Cards, Chart, CountryPicker, Anothersitelink } from './components'\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport coronaImage from './images/image.png';\nclass App extends Component {\n\n  state = {\n    data: {},\n    country: ''\n  }\n\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country:country });\n  }\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div className={styles.container}>\n          <img src={coronaImage} className={styles.image} alt=\"covid\"/>\n          <Cards data={data} />\n          <CountryPicker handleCountryChange={this.handleCountryChange} />  \n          <Chart data={data} country={country}/>\n          <Anothersitelink /> \n      </div>\n    )\n  }\n}\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3z1XU\",\"image\":\"App_image__20_qc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__cF_xH\",\"card\":\"Cards_card__6ZgZa\",\"infected\":\"Cards_infected__1qega\",\"recovered\":\"Cards_recovered__3kIb3\",\"deaths\":\"Cards_deaths__F9YcP\",\"deathRate\":\"Cards_deathRate__2r9Y_\",\"recoverRate\":\"Cards_recoverRate__D2Ppv\",\"numberRecoverRate\":\"Cards_numberRecoverRate__2glnY\",\"numberDeathRate\":\"Cards_numberDeathRate__b_wfW\",\"numberRecovered\":\"Cards_numberRecovered__3kv_k\",\"numberDeaths\":\"Cards_numberDeaths__D00LT\",\"numberInfected\":\"Cards_numberInfected__1yEkm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Lrcl0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1OkQ-\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}